description: Create Security Group with Inbound and Outbound Rules
schemaVersion: '0.3'
parameters:
  VPCID:
    type: 'String'
    description: Enter the VPC ID where the security group will be created.
  SecurityGroupName:
    type: 'String'
    description: Enter the name for the new security group.
  InboundCIDR1:
    type: 'String'
    description: Enter the CIDR for Inbound Rule 1 (e.g., 0.0.0.0/0).
    default: ''
  FromPort1:
    type: 'String'
    description: Enter the From Port for Inbound Rule 1.
    default: ''
  ToPort1:
    type: 'String'
    description: Enter the To Port for Inbound Rule 1.
    default: ''
  InboundProtocol1:
    type: 'String'
    description: Enter the protocol for Inbound Rule 1 (e.g., tcp, udp, icmp).
    default: ''
  InboundCIDR2:
    type: 'String'
    description: Enter the CIDR for Inbound Rule 2.
    default: ''
  FromPort2:
    type: 'String'
    description: Enter the From Port for Inbound Rule 2.
    default: ''
  ToPort2:
    type: 'String'
    description: Enter the To Port for Inbound Rule 2.
    default: ''
  InboundProtocol2:
    type: 'String'
    description: Enter the protocol for Inbound Rule 2 (e.g., tcp, udp, icmp).
    default: ''
  InboundCIDR3:
    type: 'String'
    description: Enter the CIDR for Inbound Rule 3.
    default: ''
  FromPort3:
    type: 'String'
    description: Enter the From Port for Inbound Rule 3.
    default: ''
  ToPort3:
    type: 'String'
    description: Enter the To Port for Inbound Rule 3.
    default: ''
  InboundProtocol3:
    type: 'String'
    description: Enter the protocol for Inbound Rule 3 (e.g., tcp, udp, icmp).
    default: ''
  InboundCIDR4:
    type: 'String'
    description: Enter the CIDR for Inbound Rule 4.
    default: ''
  FromPort4:
    type: 'String'
    description: Enter the From Port for Inbound Rule 4.
    default: ''
  ToPort4:
    type: 'String'
    description: Enter the To Port for Inbound Rule 4.
    default: ''
  InboundProtocol4:
    type: 'String'
    description: Enter the protocol for Inbound Rule 4 (e.g., tcp, udp, icmp).
    default: ''
  InboundCIDR5:
    type: 'String'
    description: Enter the CIDR for Inbound Rule 5.
    default: ''
  FromPort5:
    type: 'String'
    description: Enter the From Port for Inbound Rule 5.
    default: ''
  ToPort5:
    type: 'String'
    description: Enter the To Port for Inbound Rule 5.
    default: ''
  InboundProtocol5:
    type: 'String'
    description: Enter the protocol for Inbound Rule 5 (e.g., tcp, udp, icmp).
    default: ''
  OutboundCIDR:
    type: 'String'
    description: Enter the outbound CIDR block (e.g., 0.0.0.0/0).
    default: ''
  OutboundPorts:
    type: 'String'
    description: Enter the range of ports for outbound rules (e.g., 80,443).
    default: ''
  OutboundProtocol:
    type: 'String'
    description: Enter the protocol for outbound rules (e.g., tcp, udp, icmp).
    default: ''

mainSteps:
  - name: CreateSecurityGroup
    action: 'aws:executeAwsApi'
    inputs:
      Service: ec2
      Api: CreateSecurityGroup
      VpcId: '{{VPCID}}'
      GroupName: '{{SecurityGroupName}}'
      Description: 'Created by SSM Automation'
    outputs:
      - Name: SecurityGroupId
        Selector: '$.GroupId'
        Type: String

  - name: ConfigureInboundRules
    action: 'aws:executeAwsApi'
    inputs:
      Service: ec2
      Api: AuthorizeSecurityGroupIngress
      GroupId: '{{CreateSecurityGroup.SecurityGroupId}}'
      IpPermissions:
        - FromPort: '{{FromPort1}}'
          ToPort: '{{ToPort1}}'
          IpProtocol: '{{InboundProtocol1}}'
          IpRanges:
            - CidrIp: '{{InboundCIDR1}}'
        - FromPort: '{{FromPort2}}'
          ToPort: '{{ToPort2}}'
          IpProtocol: '{{InboundProtocol2}}'
          IpRanges:
            - CidrIp: '{{InboundCIDR2}}'
        - FromPort: '{{FromPort3}}'
          ToPort: '{{ToPort3}}'
          IpProtocol: '{{InboundProtocol3}}'
          IpRanges:
            - CidrIp: '{{InboundCIDR3}}'
        - FromPort: '{{FromPort4}}'
          ToPort: '{{ToPort4}}'
          IpProtocol: '{{InboundProtocol4}}'
          IpRanges:
            - CidrIp: '{{InboundCIDR4}}'
        - FromPort: '{{FromPort5}}'
          ToPort: '{{ToPort5}}'
          IpProtocol: '{{InboundProtocol5}}'

  - name: ConfigureOutboundRule
    action: 'aws:executeAwsApi'
    when: '{{OutboundCIDR}} != ""'
    inputs:
      Service: ec2
      Api: AuthorizeSecurityGroupEgress
      GroupId: '{{CreateSecurityGroup.SecurityGroupId}}'
      IpPermissions:
        - FromPort: '{{OutboundPorts}}'
          ToPort: '{{OutboundPorts}}'
          IpProtocol: '{{OutboundProtocol}}'
          IpRanges:
            - CidrIp: '{{OutboundCIDR}}'
