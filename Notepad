{
  "description": "Create Security Group with Inbound and Outbound Rules",
  "schemaVersion": "0.3",
  "parameters": {
    "VPCID": {
      "type": "String",
      "description": "Enter the VPC ID where the security group will be created"
    },
    "SecurityGroupName": {
      "type": "String",
      "description": "Enter the name for the new security group"
    },
    "InboundCIDR1": {
      "type": "String",
      "description": "Enter the CIDR for Inbound Rule 1 (e.g., 0.0.0.0/0)"
    },
    "FromPort1": {
      "type": "String",
      "description": "Enter the From Port for Inbound Rule 1"
    },
    "ToPort1": {
      "type": "String",
      "description": "Enter the To Port for Inbound Rule 1"
    },
    "InboundCIDR2": {
      "type": "String",
      "description": "Enter the CIDR for Inbound Rule 2 (e.g., 192.168.0.0/16)"
    },
    "FromPort2": {
      "type": "String",
      "description": "Enter the From Port for Inbound Rule 2"
    },
    "ToPort2": {
      "type": "String",
      "description": "Enter the To Port for Inbound Rule 2"
    },
    "InboundCIDR3": {
      "type": "String",
      "description": "Enter the CIDR for Inbound Rule 3"
    },
    "FromPort3": {
      "type": "String",
      "description": "Enter the From Port for Inbound Rule 3"
    },
    "ToPort3": {
      "type": "String",
      "description": "Enter the To Port for Inbound Rule 3"
    },
    "InboundCIDR4": {
      "type": "String",
      "description": "Enter the CIDR for Inbound Rule 4"
    },
    "FromPort4": {
      "type": "String",
      "description": "Enter the From Port for Inbound Rule 4"
    },
    "ToPort4": {
      "type": "String",
      "description": "Enter the To Port for Inbound Rule 4"
    },
    "InboundCIDR5": {
      "type": "String",
      "description": "Enter the CIDR for Inbound Rule 5"
    },
    "FromPort5": {
      "type": "String",
      "description": "Enter the From Port for Inbound Rule 5"
    },
    "ToPort5": {
      "type": "String",
      "description": "Enter the To Port for Inbound Rule 5"
    },
    "OutboundCIDR": {
      "type": "String",
      "description": "Enter the outbound CIDR block (e.g., 0.0.0.0/0)",
      "default": "0.0.0.0/0"
    },
    "OutboundPorts": {
      "type": "String",
      "description": "Enter the range of ports for outbound rules (e.g., 80,443)",
      "default": "0-65535"
    }
  },
  "mainSteps": [
    {
      "name": "CreateSecurityGroup",
      "action": "aws:executeAwsApi",
      "inputs": {
        "Service": "ec2",
        "Api": "CreateSecurityGroup",
        "VpcId": "{{VPCID}}",
        "GroupName": "{{SecurityGroupName}}",
        "Description": "Created by SSM Automation"
      },
      "outputs": [
        {
          "Name": "SecurityGroupId",
          "Selector": "$.GroupId",
          "Type": "String"
        }
      ]
    },
    {
      "name": "ConfigureInboundRules",
      "action": "aws:executeAwsApi",
      "when": "{{InboundCIDR1}} != ''",
      "inputs": {
        "Service": "ec2",
        "Api": "AuthorizeSecurityGroupIngress",
        "GroupId": "{{CreateSecurityGroup.SecurityGroupId}}",
        "IpPermissions": [
          {
            "FromPort": "{{FromPort1}}",
            "ToPort": "{{ToPort1}}",
            "IpProtocol": "{{InboundProtocol1}}",
            "IpRanges": [
              {
                "CidrIp": "{{InboundCIDR1}}"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "ConfigureInboundRule2",
      "action": "aws:executeAwsApi",
      "when": "{{InboundCIDR2}} != ''",
      "inputs": {
        "Service": "ec2",
        "Api": "AuthorizeSecurityGroupIngress",
        "GroupId": "{{CreateSecurityGroup.SecurityGroupId}}",
        "IpPermissions": [
          {
            "FromPort": "{{FromPort2}}",
            "ToPort": "{{ToPort2}}",
            "IpProtocol": "{{InboundProtocol2}}",
            "IpRanges": [
              {
                "CidrIp": "{{InboundCIDR2}}"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "ConfigureInboundRule3",
      "action": "aws:executeAwsApi",
      "when": "{{InboundCIDR3}} != ''",
      "inputs": {
        "Service": "ec2",
        "Api": "AuthorizeSecurityGroupIngress",
        "GroupId": "{{CreateSecurityGroup.SecurityGroupId}}",
        "IpPermissions": [
          {
            "FromPort": "{{FromPort3}}",
            "ToPort": "{{ToPort3}}",
            "IpProtocol": "{{InboundProtocol3}}",
            "IpRanges": [
              {
                "CidrIp": "{{InboundCIDR3}}"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "ConfigureInboundRule4",
      "action": "aws:executeAwsApi",
      "when": "{{InboundCIDR4}} != ''",
      "inputs": {
        "Service": "ec2",
        "Api": "AuthorizeSecurityGroupIngress",
        "GroupId": "{{CreateSecurityGroup.SecurityGroupId}}",
        "IpPermissions": [
          {
            "FromPort": "{{FromPort4}}",
            "ToPort": "{{ToPort4}}",
            "IpProtocol": "{{InboundProtocol4}}",
            "IpRanges": [
              {
                "CidrIp": "{{InboundCIDR4}}"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "ConfigureInboundRule5",
      "action": "aws:executeAwsApi",
      "when": "{{InboundCIDR5}} != ''",
      "inputs": {
        "Service": "ec2",
        "Api": "AuthorizeSecurityGroupIngress",
        "GroupId": "{{CreateSecurityGroup.SecurityGroupId}}",
        "IpPermissions": [
          {
            "FromPort": "{{FromPort5}}",
            "ToPort": "{{ToPort5}}",
            "IpProtocol": "{{InboundProtocol5}}"
          }
        ]
      }
    },
    {
      "name": "ConfigureOutboundRule",
      "action": "aws:executeAwsApi",
      "when": "{{OutboundCIDR}} != ''",
      "inputs": {
        "Service": "ec2",
        "Api": "AuthorizeSecurityGroupEgress",
        "GroupId": "{{CreateSecurityGroup.SecurityGroupId}}",
        "IpPermissions": [
          {
            "FromPort": "{{OutboundPorts}}",
            "ToPort": "{{OutboundPorts}}",
            "IpProtocol": "{{OutboundProtocol}}",
            "IpRanges": [
              {
                "CidrIp": "{{OutboundCIDR}}"
              }
            ]
          }
        ]
      }
    }
  ]
}
